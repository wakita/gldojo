#version 430

const float PI = 3.14159265359;

// layout (triangles, point_mode, equal_spacing, cw) in;
layout (triangles, equal_spacing, cw) in;

in float r_tes;
out vec4 color_fs;

void main() {
  vec3 T = gl_TessCoord;

  float t = 0;
  vec3 c = vec3(0);
  int noise = 0;

  if (T[0] < 1 / (gl_TessLevelOuter[0] + 1)) {
    t = T[2];
    c = vec3(1, 0, 0);
  } else if (T[1] < 1 / (gl_TessLevelOuter[1] + 1)) {
    t = 1 + T[0];
    c = vec3(0, 1, 0);
  } else if (T[2] < 1 / (gl_TessLevelOuter[2] + 1)) {
    t = 2 + T[1];
    c = vec3(0, 0, 1);
  } else {
    noise = 1;
    gl_Position = vec4(0, 0, 0, 1);
    color_fs = vec4(1, 1, 1, 1);
  }

  if (noise == 0) {
    float theta = PI * 2 * t / 3;
    gl_Position = vec4(cos(theta), sin(theta), 0, 1);
    color_fs = vec4(c, 1);
  }
}

==> SGP1.vs <==
#version 430

// Per-vertex ADS shader

layout (location = 0) in vec3 position_vs;
layout (location = 1) in vec3 normal_vs;
layout (location = 5) in vec3 spherePosition_vs;

out vec3 LightIntensity;

struct LightInfo {
  vec4 Position; // Light position in eye coords.
  vec3 La;       // Ambient light intensity
  vec3 Ld;       // Diffuse light intensity
  vec3 Ls;       // Specular light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
  vec3 Ka;            // Ambient reflectivity
  vec3 Kd;            // Diffuse reflectivity
  vec3 Ks;            // Specular reflectivity
  float Shininess;    // Specular shininess factor
};

uniform MaterialInfo Material;

uniform mat4 MV;
uniform mat4 MVP;
uniform mat3 Normal;

void main() {
  vec3 tnorm = normalize(Normal * normal_vs);
  vec4 eyeCoords = MV * vec4(spherePosition_vs + position_vs, 1.0);
  // vec4 eyeCoords = MV * vec4(position_vs, 1.0);
  vec3 s = normalize(vec3(Light.Position - eyeCoords));
  vec3 v = normalize(-eyeCoords.xyz);
  vec3 r = reflect(-s, tnorm);
  float sDotN = max(dot(s, tnorm), 0.0);
  vec3 ambient = Light.La * Material.Ka;
  vec3 diffuse = Light.Ld * Material.Kd * sDotN;
  vec3 spec = vec3(0.0);
  if (sDotN > 0.0) {
    spec = Light.Ls * Material.Ks *
      pow(max(dot(r, v), 0.0), Material.Shininess);
  }

  LightIntensity = ambient + diffuse + spec;
  gl_Position = MVP * vec4(spherePosition_vs + position_vs, 1.0);
  // gl_Position = MVP * vec4(position_vs, 1.0);
}

==> SGP1.fs <==
#version 430

in vec3 LightIntensity;

layout (location = 0) out vec4 FragColor;

void main() {
  FragColor = vec4(LightIntensity, 1.0);
}
